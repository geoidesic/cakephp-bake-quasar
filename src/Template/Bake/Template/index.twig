{#
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @since         2.0.0
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
#}
<?php
/**
 * @var \{{ namespace }}\View\AppView $this
 * @var \{{ entityClass }}[]|\Cake\Collection\CollectionInterface ${{ pluralVar }}
 */
?>
{% set fields = Bake.filterFields(fields, schema, modelObject, indexColumns, ['binary', 'text']) %}

<?php $this->start('q-layout-drawer'); ?>
    <q-layout-drawer
      v-model="drawerState"
      :content-class="$q.theme === 'mat' ? 'q-color-quinary' : null"
    >
        <q-list no-border link inset-delimiter>
            <q-list-header><?= __('Actions') ?></q-list-header>
            <q-item><?= $this->Html->link(__('New {{ singularHumanName }}'), ['action' => 'add']) ?></q-item>
    {% set done = [] %}
    {% for type, data in associations %}
    {% for alias, details in data %}
    {% if details.navLink and details.controller is not same as(_view.name) and details.controller not in done %}
            <q-item><?= $this->Html->link(__('List {{ alias|underscore|humanize }}'), ['controller' => '{{ details.controller }}', 'action' => 'index']) ?></q-item>
            <q-item><?= $this->Html->link(__('New {{ alias|singularize|underscore|humanize }}'), ['controller' => '{{ details.controller }}', 'action' => 'add']) ?></q-item>
    {% set done = done|merge([details.controller]) %}
    {% endif %}
    {% endfor %}
    {% endfor %}
        </q-list>
    </q-layout-drawer>
<?php $this->end() ?>


<?php $this->Html->scriptStart(['block' => 'vue-template', 'type' => "text/x-template", 'id' => "content"]); ?>

    <div class="{{ pluralVar }} index content">
        <h2><?= __('{{ pluralHumanName }}') ?></h2>
        <table cellpadding="0" cellspacing="0">
            <thead>
                <tr>
    {% for field in fields %}
                    <th scope="col"><?= $this->Paginator->sort('{{ field }}') ?></th>
    {% endfor %}
                    <th scope="col" class="actions"><?= __('Actions') ?></th>
                </tr>
            </thead>
            <tbody>
                <?php foreach (${{ pluralVar }} as ${{ singularVar }}): ?>
                <tr>
    {% for field in fields %}
    {% set isKey = false %}
    {% if associations.BelongsTo %}
    {% for alias, details in associations.BelongsTo if field == details.foreignKey %}
    {% set isKey = true %}
                    <td data-column="{{ field|humanize }}"><?= ${{ singularVar }}->has('{{ details.property }}') ? $this->Html->link(${{ singularVar }}->{{ details.property }}->{{ details.displayField }}, ['controller' => '{{ details.controller }}', 'action' => 'view', ${{ singularVar }}->{{ details.property }}->{{ details.primaryKey[0] }}]) : '' ?></td>
    {% endfor %}
    {% endif %}
    {% if isKey is not same as(true) %}
    {% set columnData = Bake.columnData(field, schema) %}
    {% if columnData.type not in ['integer', 'float', 'decimal', 'biginteger', 'smallinteger', 'tinyinteger'] %}
                    <td data-column="{{ field }}"><?= h(${{ singularVar }}->{{ field }}) ?></td>
    {% else %}
                    <td data-column="{{ field }}"><?= $this->Number->format(${{ singularVar }}->{{ field }}) ?></td>
    {% endif %}
    {% endif %}
    {% endfor %}
    {% set pk = '$' ~ singularVar ~ '->' ~ primaryKey[0] %}
                    <td class="actions">
                        <?= $this->Html->link('<q-icon name="visibility" />', ['action' => 'view', {{ pk|raw }}], ['escape' => false]) ?>
                        <?= $this->Html->link('<q-icon name="edit" />', ['action' => 'edit', {{ pk|raw }}], ['escape' => false]) ?>
                        <?= $this->Form->postLink('<q-icon name="delete" />', ['action' => 'delete', {{ pk|raw }}], ['escape' => false, 'confirm' => __('Are you sure you want to delete # {0}?', {{ pk|raw }})]) ?>
                    </td>
                </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
        <div class="paginator">
            <ul class="pagination">
                <?= $this->Paginator->first('<< ' . __('first')) ?>
                <?= $this->Paginator->prev('< ' . __('previous')) ?>
                <?= $this->Paginator->numbers() ?>
                <?= $this->Paginator->next(__('next') . ' >') ?>
                <?= $this->Paginator->last(__('last') . ' >>') ?>
            </ul>
            <p><?= $this->Paginator->counter(['format' => __('Page {{ '{{' }}page{{ '}}' }} of {{ '{{' }}pages{{ '}}' }}, showing {{ '{{' }}current{{ '}}' }} record(s) out of {{ '{{' }}count{{ '}}' }} total')]) ?></p>
        </div>

    </div>
<?php $this->Html->scriptEnd(); ?>

<?php $this->Html->scriptStart(['block' => 'vue-component']); ?>
    Vue.component('quasar-page', {
      template: '#content'
    })
<?php
$this->Html->scriptEnd();

